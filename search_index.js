var searchModuleIndex = ["README","ctx","html","mime","picoserver","router","server","session","utils",];
var searchIndex = ["SameSite","Cookie","Req","parse_cookies","parse_files","parse_form","parse_headers","parse_query","Resp","headers_bytes","permanent_redirect","redirect","send","send_file","send_html","send_json","send_status","set_cookies","stop","HandlerFunc","MiddlewareFunc","get_error_status_code","error_route","FormData","Tag","str","is_text","html","BlockTagConfig","html","block","meta","link","style","tag","br","MimeType","map[string]MimeType","charset","content_type","extension","lookup","serve","GroupCallbackFn","Router","receive","respond_error","inject","inject_context","route","group","use","new","get_ctx","Method","Route","str","find","extract_route_path","map[string]&Route","route","group","use","Router","serve","LocalStore","read","delete","write","Session","set","set_many","has","pop","get","must_get","remove","is_empty","regenerate","write","restore","delete","cookie","set_header","remove_header","get_header","new_session_id","new_session_from_id","SessionOptions","start","Store","green_log","yellow_log","red_log","status_code_msg","identify_mime",];
var searchModuleData = [["![Logo](https://github.com/nedpals/vex/raw/master/vex.svg)","index.html"],["","ctx.html"],["","html.html"],["# vex.mime","mime.html"],["","picoserver.html"],["","router.html"],["","server.html"],["","session.html"],["","utils.html"],];
var searchData = [["ctx","","ctx.html#SameSite","enum "],["ctx","","ctx.html#Cookie","struct "],["ctx","Server request data","ctx.html#Req","struct "],["ctx","parse_cookies parses the Cookie header content and returns the content. Returns ","ctx.html#Req.parse_cookies","fn (Req)"],["ctx","parse_files parses the `multipart/form-data` content-type","ctx.html#Req.parse_files","fn (Req)"],["ctx","parse_form parses the body based on its provided content-type and returns the ou","ctx.html#Req.parse_form","fn (Req)"],["ctx","parse_headers parses and injects the raw_headers into the request struct. Used i","ctx.html#Req.parse_headers","fn (Req)"],["ctx","parse_query parses the raw query string from the request and returns a map of st","ctx.html#Req.parse_query","fn (Req)"],["ctx","Server response data","ctx.html#Resp","struct "],["ctx","","ctx.html#Resp.headers_bytes","fn (Resp)"],["ctx","","ctx.html#Resp.permanent_redirect","fn (Resp)"],["ctx","redirect writes a 301 response and redirects to the specified url or location","ctx.html#Resp.redirect","fn (Resp)"],["ctx","send writes the body and status code to the response data.","ctx.html#Resp.send","fn (Resp)"],["ctx","send_file writes the contents of the file to the response data.","ctx.html#Resp.send_file","fn (Resp)"],["ctx","send_html writes the body to the response data as an HTML content","ctx.html#Resp.send_html","fn (Resp)"],["ctx","send_json is a generic function that encodes the payload and writes the JSON str","ctx.html#Resp.send_json","fn (Resp)"],["ctx","send_status sends an HTML response of the status code","ctx.html#Resp.send_status","fn (Resp)"],["ctx","","ctx.html#Resp.set_cookies","fn (Resp)"],["ctx","stop terminates the response","ctx.html#Resp.stop","fn (Resp)"],["ctx","","ctx.html#HandlerFunc","type "],["ctx","","ctx.html#MiddlewareFunc","type "],["ctx","","ctx.html#get_error_status_code","fn "],["ctx","","ctx.html#error_route","fn "],["ctx","","ctx.html#FormData","struct "],["html","","html.html#Tag","struct "],["html","return the tag to encoded JSON","html.html#Tag.str","fn (Tag)"],["html","is_text returns true if the tag name is empty and if the tag text is not empty.","html.html#Tag.is_text","fn (Tag)"],["html","html returns the HTML output of the contents of the Tag struct.","html.html#Tag.html","fn (Tag)"],["html","","html.html#BlockTagConfig","struct "],["html","html returns a Tag equivalent to `<!DOCTYPE html><html>...</html>`","html.html#html","fn "],["html","block is the same as `tag` but with Tag children","html.html#block","fn "],["html","meta returns a Tag equivalent to `<meta />`","html.html#meta","fn "],["html","link returns a Tag equivalent to `<link />`","html.html#link","fn "],["html","style returns a Tag equivalent to `<style>...</style>`","html.html#style","fn "],["html","tag returns itself for uniformity when using function-based DSL","html.html#tag","fn "],["html","br returns a Tag equivalent to `<br />`","html.html#br","fn "],["mime","","mime.html#MimeType","struct "],["mime","","mime.html#map[string]MimeType","type "],["mime","charset returns the character set of a specific content type.","mime.html#map[string]MimeType.charset","fn (map[string]MimeType)"],["mime","content_type returns full content-type header given a content-type or extension.","mime.html#map[string]MimeType.content_type","fn (map[string]MimeType)"],["mime","extension returns the default extension of a specific content-type","mime.html#map[string]MimeType.extension","fn (map[string]MimeType)"],["mime","lookup searches and returns the content-type associated with the provided file p","mime.html#map[string]MimeType.lookup","fn (map[string]MimeType)"],["picoserver","Starts the server at the given port","picoserver.html#serve","fn "],["router","","router.html#GroupCallbackFn","type "],["router","","router.html#Router","struct "],["router","","router.html#Router.receive","fn (Router)"],["router","","router.html#Router.respond_error","fn (Router)"],["router","","router.html#Router.inject","fn (Router)"],["router","inject_context injects the context to the handler context.","router.html#Router.inject_context","fn (Router)"],["router","route is a shortcut method to `r.routes.route` method","router.html#Router.route","fn (Router)"],["router","group is a shortcut method to `r.routes.group` method","router.html#Router.group","fn (Router)"],["router","use registers handlers as app-wide middlewares","router.html#Router.use","fn (Router)"],["router","","router.html#new","fn "],["router","get_ctx accesses the global context","router.html#get_ctx","fn "],["router","List of supported HTTP methods.","router.html#Method","enum "],["router","","router.html#Route","struct "],["router","empty str to avoid cgen error","router.html#Route.str","fn (Route)"],["router","find searches the matching route and returns the injected params data and the ro","router.html#Route.find","fn (Route)"],["router","extract_route_path returns the name, the parameter name (if present), and the re","router.html#extract_route_path","fn "],["router","","router.html#map[string]&Route","type "],["router","route creates a new route based on the given method, path, and the handlers. See","router.html#map[string]&Route.route","fn (map[string]&Route)"],["router","group adds a series of routes into the desired prefix","router.html#map[string]&Route.group","fn (map[string]&Route)"],["router","","router.html#map[string]&Route.use","fn (map[string]&Route)"],["server","","server.html#Router","interface "],["server","serve starts the server at the give port","server.html#serve","fn "],["session","LocalStore reads ands saves sessions on the local disk in a JSON-encoded format.","session.html#LocalStore","struct "],["session","read reads an individual session from the local session data.","session.html#LocalStore.read","fn (LocalStore)"],["session","delete removes an individual session from the local session data.","session.html#LocalStore.delete","fn (LocalStore)"],["session","write saves session data to the local storage.","session.html#LocalStore.write","fn (LocalStore)"],["session","Session contains user data, the session Store, and cookie information","session.html#Session","struct "],["session","set sets a value in the session data","session.html#Session.set","fn (Session)"],["session","set_many sets multiple keys and values in the session data","session.html#Session.set_many","fn (Session)"],["session","has checks if a value exists in the session data","session.html#Session.has","fn (Session)"],["session","pop reads a values from the session data to return, then deletes the key-value-p","session.html#Session.pop","fn (Session)"],["session","get reads a value from the session data and returns it. Returns an empty string ","session.html#Session.get","fn (Session)"],["session","must_get reads a value from the session data and return  it. If key provided doe","session.html#Session.must_get","fn (Session)"],["session","remove deletes a key-value-pair from the session data.","session.html#Session.remove","fn (Session)"],["session","is_empty returns whether or not the session has any data stored in it.","session.html#Session.is_empty","fn (Session)"],["session","regenereate replaces the ID of the session, but leaves the data and cookie info ","session.html#Session.regenerate","fn (Session)"],["session","write saves the session data to the Store of the session","session.html#Session.write","fn (Session)"],["session","restore fetches the data from the Store of the session using the ID of the sessi","session.html#Session.restore","fn (Session)"],["session","delete deletes the session data from Store.","session.html#Session.delete","fn (Session)"],["session","cookie returns the Session as a `ctx.Cookie` instance.","session.html#Session.cookie","fn (Session)"],["session","set_header sets a `Set-Cookie` on Session.res that represents the current Sessio","session.html#Session.set_header","fn (Session)"],["session","remove_header removes the corresponding `Set-Cookie` header in `Session.res.head","session.html#Session.remove_header","fn (Session)"],["session","get_header is a passthrough for `Cookie.header_str`.","session.html#Session.get_header","fn (Session)"],["session","new_session_id generates a new sesssion id.","session.html#new_session_id","fn "],["session","new_session_from_id genereates a new Session from the provided ID and storage me","session.html#new_session_from_id","fn "],["session","SessionOptions are used to customize the 'Set-Cookie' header that will be sent w","session.html#SessionOptions","struct "],["session","start checks to see if existing session ID exists in cookies based off of of the","session.html#start","fn "],["session","Store is the interface that Session accepts to store data. Using an interface al","session.html#Store","interface "],["utils","","utils.html#green_log","fn "],["utils","","utils.html#yellow_log","fn "],["utils","","utils.html#red_log","fn "],["utils","status_code_msg returns the message of the given status code. returns \"Internal","utils.html#status_code_msg","fn "],["utils","identify_mime returns the MIME content type of a filename.","utils.html#identify_mime","fn "],];
